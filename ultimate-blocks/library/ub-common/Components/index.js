"use strict";var Xe=Object.defineProperty;var Pe=Object.getOwnPropertySymbols;var Ze=Object.prototype.hasOwnProperty,et=Object.prototype.propertyIsEnumerable;var Ce=(e,t,r)=>t in e?Xe(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,fe=(e,t)=>{for(var r in t||(t={}))Ze.call(t,r)&&Ce(e,r,t[r]);if(Pe)for(var r of Pe(t))et.call(t,r)&&Ce(e,r,t[r]);return e};var Z=(e,t,r)=>new Promise((n,s)=>{var a=f=>{try{i(r.next(f))}catch(p){s(p)}},l=f=>{try{i(r.throw(f))}catch(p){s(p)}},i=f=>f.done?n(f.value):Promise.resolve(f.value).then(a,l);i((r=r.apply(e,t)).next())});Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const P=require("react/jsx-runtime"),w=require("react"),Te=require("@wordpress/components"),We=require("@wordpress/i18n"),ce=require("@fortawesome/fontawesome-svg-core"),tt=require("../.Chunks/edb91f7f.js"),Ye=require("@fortawesome/free-solid-svg-icons"),ze=require("@fortawesome/free-brands-svg-icons");let se;const rt=new Uint8Array(16);function nt(){if(!se&&(se=typeof crypto!="undefined"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!se))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return se(rt)}const F=[];for(let e=0;e<256;++e)F.push((e+256).toString(16).slice(1));function ot(e,t=0){return(F[e[t+0]]+F[e[t+1]]+F[e[t+2]]+F[e[t+3]]+"-"+F[e[t+4]]+F[e[t+5]]+"-"+F[e[t+6]]+F[e[t+7]]+"-"+F[e[t+8]]+F[e[t+9]]+"-"+F[e[t+10]]+F[e[t+11]]+F[e[t+12]]+F[e[t+13]]+F[e[t+14]]+F[e[t+15]]).toLowerCase()}const at=typeof crypto!="undefined"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto),_e={randomUUID:at};function ge(e,t,r){if(_e.randomUUID&&!t&&!e)return _e.randomUUID();e=e||{};const n=e.random||(e.rng||nt)();if(n[6]=n[6]&15|64,n[8]=n[8]&63|128,t){r=r||0;for(let s=0;s<16;++s)t[r+s]=n[s];return t}return ot(n)}function it({onChange:e,value:t}){return P.jsx("div",{className:"ultimate-blocks-icon-search-wrapper",children:P.jsx("input",{className:"ultimate-blocks-icon-search-input",type:"text",value:t,placeholder:We.__("Searchâ€¦","ub-common"),onInput:({target:r})=>e(r.value)})})}function Ie(e,t){const{iconName:r}=t;this.getAttributes=()=>t,this.getName=()=>r}var v={},Re={get exports(){return v},set exports(e){v=e}},ue={},st={get exports(){return ue},set exports(e){ue=e}},R={};/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var je;function ct(){if(je)return R;je=1;var e=typeof Symbol=="function"&&Symbol.for,t=e?Symbol.for("react.element"):60103,r=e?Symbol.for("react.portal"):60106,n=e?Symbol.for("react.fragment"):60107,s=e?Symbol.for("react.strict_mode"):60108,a=e?Symbol.for("react.profiler"):60114,l=e?Symbol.for("react.provider"):60109,i=e?Symbol.for("react.context"):60110,f=e?Symbol.for("react.async_mode"):60111,p=e?Symbol.for("react.concurrent_mode"):60111,y=e?Symbol.for("react.forward_ref"):60112,b=e?Symbol.for("react.suspense"):60113,k=e?Symbol.for("react.suspense_list"):60120,C=e?Symbol.for("react.memo"):60115,M=e?Symbol.for("react.lazy"):60116,_=e?Symbol.for("react.block"):60121,x=e?Symbol.for("react.fundamental"):60117,N=e?Symbol.for("react.responder"):60118,B=e?Symbol.for("react.scope"):60119;function q(c){if(typeof c=="object"&&c!==null){var J=c.$$typeof;switch(J){case t:switch(c=c.type,c){case f:case p:case n:case a:case s:case b:return c;default:switch(c=c&&c.$$typeof,c){case i:case y:case M:case C:case l:return c;default:return J}}case r:return J}}}function L(c){return q(c)===p}return R.AsyncMode=f,R.ConcurrentMode=p,R.ContextConsumer=i,R.ContextProvider=l,R.Element=t,R.ForwardRef=y,R.Fragment=n,R.Lazy=M,R.Memo=C,R.Portal=r,R.Profiler=a,R.StrictMode=s,R.Suspense=b,R.isAsyncMode=function(c){return L(c)||q(c)===f},R.isConcurrentMode=L,R.isContextConsumer=function(c){return q(c)===i},R.isContextProvider=function(c){return q(c)===l},R.isElement=function(c){return typeof c=="object"&&c!==null&&c.$$typeof===t},R.isForwardRef=function(c){return q(c)===y},R.isFragment=function(c){return q(c)===n},R.isLazy=function(c){return q(c)===M},R.isMemo=function(c){return q(c)===C},R.isPortal=function(c){return q(c)===r},R.isProfiler=function(c){return q(c)===a},R.isStrictMode=function(c){return q(c)===s},R.isSuspense=function(c){return q(c)===b},R.isValidElementType=function(c){return typeof c=="string"||typeof c=="function"||c===n||c===p||c===a||c===s||c===b||c===k||typeof c=="object"&&c!==null&&(c.$$typeof===M||c.$$typeof===C||c.$$typeof===l||c.$$typeof===i||c.$$typeof===y||c.$$typeof===x||c.$$typeof===N||c.$$typeof===B||c.$$typeof===_)},R.typeOf=q,R}var j={};/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Ae;function ut(){return Ae||(Ae=1,process.env.NODE_ENV!=="production"&&function(){var e=typeof Symbol=="function"&&Symbol.for,t=e?Symbol.for("react.element"):60103,r=e?Symbol.for("react.portal"):60106,n=e?Symbol.for("react.fragment"):60107,s=e?Symbol.for("react.strict_mode"):60108,a=e?Symbol.for("react.profiler"):60114,l=e?Symbol.for("react.provider"):60109,i=e?Symbol.for("react.context"):60110,f=e?Symbol.for("react.async_mode"):60111,p=e?Symbol.for("react.concurrent_mode"):60111,y=e?Symbol.for("react.forward_ref"):60112,b=e?Symbol.for("react.suspense"):60113,k=e?Symbol.for("react.suspense_list"):60120,C=e?Symbol.for("react.memo"):60115,M=e?Symbol.for("react.lazy"):60116,_=e?Symbol.for("react.block"):60121,x=e?Symbol.for("react.fundamental"):60117,N=e?Symbol.for("react.responder"):60118,B=e?Symbol.for("react.scope"):60119;function q(u){return typeof u=="string"||typeof u=="function"||u===n||u===p||u===a||u===s||u===b||u===k||typeof u=="object"&&u!==null&&(u.$$typeof===M||u.$$typeof===C||u.$$typeof===l||u.$$typeof===i||u.$$typeof===y||u.$$typeof===x||u.$$typeof===N||u.$$typeof===B||u.$$typeof===_)}function L(u){if(typeof u=="object"&&u!==null){var K=u.$$typeof;switch(K){case t:var ie=u.type;switch(ie){case f:case p:case n:case a:case s:case b:return ie;default:var we=ie&&ie.$$typeof;switch(we){case i:case y:case M:case C:case l:return we;default:return K}}case r:return K}}}var c=f,J=p,oe=i,ae=l,ee=t,$=y,U=n,D=M,W=C,H=r,Q=a,z=s,Y=b,X=!1;function te(u){return X||(X=!0,console.warn("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.")),o(u)||L(u)===f}function o(u){return L(u)===p}function d(u){return L(u)===i}function O(u){return L(u)===l}function g(u){return typeof u=="object"&&u!==null&&u.$$typeof===t}function m(u){return L(u)===y}function T(u){return L(u)===n}function h(u){return L(u)===M}function S(u){return L(u)===C}function I(u){return L(u)===r}function A(u){return L(u)===a}function E(u){return L(u)===s}function V(u){return L(u)===b}j.AsyncMode=c,j.ConcurrentMode=J,j.ContextConsumer=oe,j.ContextProvider=ae,j.Element=ee,j.ForwardRef=$,j.Fragment=U,j.Lazy=D,j.Memo=W,j.Portal=H,j.Profiler=Q,j.StrictMode=z,j.Suspense=Y,j.isAsyncMode=te,j.isConcurrentMode=o,j.isContextConsumer=d,j.isContextProvider=O,j.isElement=g,j.isForwardRef=m,j.isFragment=T,j.isLazy=h,j.isMemo=S,j.isPortal=I,j.isProfiler=A,j.isStrictMode=E,j.isSuspense=V,j.isValidElementType=q,j.typeOf=L}()),j}var ke;function Ve(){return ke||(ke=1,function(e){process.env.NODE_ENV==="production"?e.exports=ct():e.exports=ut()}(st)),ue}/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var de,Ne;function lt(){if(Ne)return de;Ne=1;var e=Object.getOwnPropertySymbols,t=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function n(a){if(a==null)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(a)}function s(){try{if(!Object.assign)return!1;var a=new String("abc");if(a[5]="de",Object.getOwnPropertyNames(a)[0]==="5")return!1;for(var l={},i=0;i<10;i++)l["_"+String.fromCharCode(i)]=i;var f=Object.getOwnPropertyNames(l).map(function(y){return l[y]});if(f.join("")!=="0123456789")return!1;var p={};return"abcdefghijklmnopqrst".split("").forEach(function(y){p[y]=y}),Object.keys(Object.assign({},p)).join("")==="abcdefghijklmnopqrst"}catch(y){return!1}}return de=s()?Object.assign:function(a,l){for(var i,f=n(a),p,y=1;y<arguments.length;y++){i=Object(arguments[y]);for(var b in i)t.call(i,b)&&(f[b]=i[b]);if(e){p=e(i);for(var k=0;k<p.length;k++)r.call(i,p[k])&&(f[p[k]]=i[p[k]])}}return f},de}var pe,qe;function Ee(){if(qe)return pe;qe=1;var e="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";return pe=e,pe}var ye,Le;function Be(){return Le||(Le=1,ye=Function.call.bind(Object.prototype.hasOwnProperty)),ye}var me,Me;function ft(){if(Me)return me;Me=1;var e=function(){};if(process.env.NODE_ENV!=="production"){var t=Ee(),r={},n=Be();e=function(a){var l="Warning: "+a;typeof console!="undefined"&&console.error(l);try{throw new Error(l)}catch(i){}}}function s(a,l,i,f,p){if(process.env.NODE_ENV!=="production"){for(var y in a)if(n(a,y)){var b;try{if(typeof a[y]!="function"){var k=Error((f||"React class")+": "+i+" type `"+y+"` is invalid; it must be a function, usually from the `prop-types` package, but received `"+typeof a[y]+"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");throw k.name="Invariant Violation",k}b=a[y](l,y,f,i,null,t)}catch(M){b=M}if(b&&!(b instanceof Error)&&e((f||"React class")+": type specification of "+i+" `"+y+"` is invalid; the type checker function must return `null` or an `Error` but returned a "+typeof b+". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."),b instanceof Error&&!(b.message in r)){r[b.message]=!0;var C=p?p():"";e("Failed "+i+" type: "+b.message+(C!=null?C:""))}}}}return s.resetWarningCache=function(){process.env.NODE_ENV!=="production"&&(r={})},me=s,me}var ve,$e;function dt(){if($e)return ve;$e=1;var e=Ve(),t=lt(),r=Ee(),n=Be(),s=ft(),a=function(){};process.env.NODE_ENV!=="production"&&(a=function(i){var f="Warning: "+i;typeof console!="undefined"&&console.error(f);try{throw new Error(f)}catch(p){}});function l(){return null}return ve=function(i,f){var p=typeof Symbol=="function"&&Symbol.iterator,y="@@iterator";function b(o){var d=o&&(p&&o[p]||o[y]);if(typeof d=="function")return d}var k="<<anonymous>>",C={array:N("array"),bigint:N("bigint"),bool:N("boolean"),func:N("function"),number:N("number"),object:N("object"),string:N("string"),symbol:N("symbol"),any:B(),arrayOf:q,element:L(),elementType:c(),instanceOf:J,node:$(),objectOf:ae,oneOf:oe,oneOfType:ee,shape:D,exact:W};function M(o,d){return o===d?o!==0||1/o===1/d:o!==o&&d!==d}function _(o,d){this.message=o,this.data=d&&typeof d=="object"?d:{},this.stack=""}_.prototype=Error.prototype;function x(o){if(process.env.NODE_ENV!=="production")var d={},O=0;function g(T,h,S,I,A,E,V){if(I=I||k,E=E||S,V!==r){if(f){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}else if(process.env.NODE_ENV!=="production"&&typeof console!="undefined"){var K=I+":"+S;!d[K]&&O<3&&(a("You are manually calling a React.PropTypes validation function for the `"+E+"` prop on `"+I+"`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."),d[K]=!0,O++)}}return h[S]==null?T?h[S]===null?new _("The "+A+" `"+E+"` is marked as required "+("in `"+I+"`, but its value is `null`.")):new _("The "+A+" `"+E+"` is marked as required in "+("`"+I+"`, but its value is `undefined`.")):null:o(h,S,I,A,E)}var m=g.bind(null,!1);return m.isRequired=g.bind(null,!0),m}function N(o){function d(O,g,m,T,h,S){var I=O[g],A=z(I);if(A!==o){var E=Y(I);return new _("Invalid "+T+" `"+h+"` of type "+("`"+E+"` supplied to `"+m+"`, expected ")+("`"+o+"`."),{expectedType:o})}return null}return x(d)}function B(){return x(l)}function q(o){function d(O,g,m,T,h){if(typeof o!="function")return new _("Property `"+h+"` of component `"+m+"` has invalid PropType notation inside arrayOf.");var S=O[g];if(!Array.isArray(S)){var I=z(S);return new _("Invalid "+T+" `"+h+"` of type "+("`"+I+"` supplied to `"+m+"`, expected an array."))}for(var A=0;A<S.length;A++){var E=o(S,A,m,T,h+"["+A+"]",r);if(E instanceof Error)return E}return null}return x(d)}function L(){function o(d,O,g,m,T){var h=d[O];if(!i(h)){var S=z(h);return new _("Invalid "+m+" `"+T+"` of type "+("`"+S+"` supplied to `"+g+"`, expected a single ReactElement."))}return null}return x(o)}function c(){function o(d,O,g,m,T){var h=d[O];if(!e.isValidElementType(h)){var S=z(h);return new _("Invalid "+m+" `"+T+"` of type "+("`"+S+"` supplied to `"+g+"`, expected a single ReactElement type."))}return null}return x(o)}function J(o){function d(O,g,m,T,h){if(!(O[g]instanceof o)){var S=o.name||k,I=te(O[g]);return new _("Invalid "+T+" `"+h+"` of type "+("`"+I+"` supplied to `"+m+"`, expected ")+("instance of `"+S+"`."))}return null}return x(d)}function oe(o){if(!Array.isArray(o))return process.env.NODE_ENV!=="production"&&(arguments.length>1?a("Invalid arguments supplied to oneOf, expected an array, got "+arguments.length+" arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."):a("Invalid argument supplied to oneOf, expected an array.")),l;function d(O,g,m,T,h){for(var S=O[g],I=0;I<o.length;I++)if(M(S,o[I]))return null;var A=JSON.stringify(o,function(V,u){var K=Y(u);return K==="symbol"?String(u):u});return new _("Invalid "+T+" `"+h+"` of value `"+String(S)+"` "+("supplied to `"+m+"`, expected one of "+A+"."))}return x(d)}function ae(o){function d(O,g,m,T,h){if(typeof o!="function")return new _("Property `"+h+"` of component `"+m+"` has invalid PropType notation inside objectOf.");var S=O[g],I=z(S);if(I!=="object")return new _("Invalid "+T+" `"+h+"` of type "+("`"+I+"` supplied to `"+m+"`, expected an object."));for(var A in S)if(n(S,A)){var E=o(S,A,m,T,h+"."+A,r);if(E instanceof Error)return E}return null}return x(d)}function ee(o){if(!Array.isArray(o))return process.env.NODE_ENV!=="production"&&a("Invalid argument supplied to oneOfType, expected an instance of array."),l;for(var d=0;d<o.length;d++){var O=o[d];if(typeof O!="function")return a("Invalid argument supplied to oneOfType. Expected an array of check functions, but received "+X(O)+" at index "+d+"."),l}function g(m,T,h,S,I){for(var A=[],E=0;E<o.length;E++){var V=o[E],u=V(m,T,h,S,I,r);if(u==null)return null;u.data&&n(u.data,"expectedType")&&A.push(u.data.expectedType)}var K=A.length>0?", expected one of type ["+A.join(", ")+"]":"";return new _("Invalid "+S+" `"+I+"` supplied to "+("`"+h+"`"+K+"."))}return x(g)}function $(){function o(d,O,g,m,T){return H(d[O])?null:new _("Invalid "+m+" `"+T+"` supplied to "+("`"+g+"`, expected a ReactNode."))}return x(o)}function U(o,d,O,g,m){return new _((o||"React class")+": "+d+" type `"+O+"."+g+"` is invalid; it must be a function, usually from the `prop-types` package, but received `"+m+"`.")}function D(o){function d(O,g,m,T,h){var S=O[g],I=z(S);if(I!=="object")return new _("Invalid "+T+" `"+h+"` of type `"+I+"` "+("supplied to `"+m+"`, expected `object`."));for(var A in o){var E=o[A];if(typeof E!="function")return U(m,T,h,A,Y(E));var V=E(S,A,m,T,h+"."+A,r);if(V)return V}return null}return x(d)}function W(o){function d(O,g,m,T,h){var S=O[g],I=z(S);if(I!=="object")return new _("Invalid "+T+" `"+h+"` of type `"+I+"` "+("supplied to `"+m+"`, expected `object`."));var A=t({},O[g],o);for(var E in A){var V=o[E];if(n(o,E)&&typeof V!="function")return U(m,T,h,E,Y(V));if(!V)return new _("Invalid "+T+" `"+h+"` key `"+E+"` supplied to `"+m+"`.\nBad object: "+JSON.stringify(O[g],null,"  ")+`
Valid keys: `+JSON.stringify(Object.keys(o),null,"  "));var u=V(S,E,m,T,h+"."+E,r);if(u)return u}return null}return x(d)}function H(o){switch(typeof o){case"number":case"string":case"undefined":return!0;case"boolean":return!o;case"object":if(Array.isArray(o))return o.every(H);if(o===null||i(o))return!0;var d=b(o);if(d){var O=d.call(o),g;if(d!==o.entries){for(;!(g=O.next()).done;)if(!H(g.value))return!1}else for(;!(g=O.next()).done;){var m=g.value;if(m&&!H(m[1]))return!1}}else return!1;return!0;default:return!1}}function Q(o,d){return o==="symbol"?!0:d?d["@@toStringTag"]==="Symbol"||typeof Symbol=="function"&&d instanceof Symbol:!1}function z(o){var d=typeof o;return Array.isArray(o)?"array":o instanceof RegExp?"object":Q(d,o)?"symbol":d}function Y(o){if(typeof o=="undefined"||o===null)return""+o;var d=z(o);if(d==="object"){if(o instanceof Date)return"date";if(o instanceof RegExp)return"regexp"}return d}function X(o){var d=Y(o);switch(d){case"array":case"object":return"an "+d;case"boolean":case"date":case"regexp":return"a "+d;default:return d}}function te(o){return!o.constructor||!o.constructor.name?k:o.constructor.name}return C.checkPropTypes=s,C.resetWarningCache=s.resetWarningCache,C.PropTypes=C,C},ve}var be,De;function pt(){if(De)return be;De=1;var e=Ee();function t(){}function r(){}return r.resetWarningCache=t,be=function(){function n(l,i,f,p,y,b){if(b!==e){var k=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw k.name="Invariant Violation",k}}n.isRequired=n;function s(){return n}var a={array:n,bigint:n,bool:n,func:n,number:n,object:n,string:n,symbol:n,any:n,arrayOf:s,element:n,elementType:n,instanceOf:s,node:n,objectOf:s,oneOf:s,oneOfType:s,shape:s,exact:s,checkPropTypes:r,resetWarningCache:t};return a.PropTypes=a,a},be}if(process.env.NODE_ENV!=="production"){var yt=Ve(),mt=!0;Re.exports=dt()(yt.isElement,mt)}else Re.exports=pt()();function Fe(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(s){return Object.getOwnPropertyDescriptor(e,s).enumerable})),r.push.apply(r,n)}return r}function G(e){for(var t=1;t<arguments.length;t++){var r=arguments[t]!=null?arguments[t]:{};t%2?Fe(Object(r),!0).forEach(function(n){re(e,n,r[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Fe(Object(r)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))})}return e}function le(e){return le=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(t){return typeof t}:function(t){return t&&typeof Symbol=="function"&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},le(e)}function re(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function vt(e,t){if(e==null)return{};var r={},n=Object.keys(e),s,a;for(a=0;a<n.length;a++)s=n[a],!(t.indexOf(s)>=0)&&(r[s]=e[s]);return r}function bt(e,t){if(e==null)return{};var r=vt(e,t),n,s;if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)n=a[s],!(t.indexOf(n)>=0)&&Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}function Se(e){return ht(e)||gt(e)||St(e)||Ot()}function ht(e){if(Array.isArray(e))return Oe(e)}function gt(e){if(typeof Symbol!="undefined"&&e[Symbol.iterator]!=null||e["@@iterator"]!=null)return Array.from(e)}function St(e,t){if(e){if(typeof e=="string")return Oe(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);if(r==="Object"&&e.constructor&&(r=e.constructor.name),r==="Map"||r==="Set")return Array.from(e);if(r==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return Oe(e,t)}}function Oe(e,t){(t==null||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function Ot(){throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function xt(e){var t,r=e.beat,n=e.fade,s=e.beatFade,a=e.bounce,l=e.shake,i=e.flash,f=e.spin,p=e.spinPulse,y=e.spinReverse,b=e.pulse,k=e.fixedWidth,C=e.inverse,M=e.border,_=e.listItem,x=e.flip,N=e.size,B=e.rotation,q=e.pull,L=(t={"fa-beat":r,"fa-fade":n,"fa-beat-fade":s,"fa-bounce":a,"fa-shake":l,"fa-flash":i,"fa-spin":f,"fa-spin-reverse":y,"fa-spin-pulse":p,"fa-pulse":b,"fa-fw":k,"fa-inverse":C,"fa-border":M,"fa-li":_,"fa-flip":x===!0,"fa-flip-horizontal":x==="horizontal"||x==="both","fa-flip-vertical":x==="vertical"||x==="both"},re(t,"fa-".concat(N),typeof N!="undefined"&&N!==null),re(t,"fa-rotate-".concat(B),typeof B!="undefined"&&B!==null&&B!==0),re(t,"fa-pull-".concat(q),typeof q!="undefined"&&q!==null),re(t,"fa-swap-opacity",e.swapOpacity),t);return Object.keys(L).map(function(c){return L[c]?c:null}).filter(function(c){return c})}function Tt(e){return e=e-0,e===e}function He(e){return Tt(e)?e:(e=e.replace(/[\-_\s]+(.)?/g,function(t,r){return r?r.toUpperCase():""}),e.substr(0,1).toLowerCase()+e.substr(1))}var It=["style"];function Et(e){return e.charAt(0).toUpperCase()+e.slice(1)}function wt(e){return e.split(";").map(function(t){return t.trim()}).filter(function(t){return t}).reduce(function(t,r){var n=r.indexOf(":"),s=He(r.slice(0,n)),a=r.slice(n+1).trim();return s.startsWith("webkit")?t[Et(s)]=a:t[s]=a,t},{})}function Je(e,t){var r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};if(typeof t=="string")return t;var n=(t.children||[]).map(function(f){return Je(e,f)}),s=Object.keys(t.attributes||{}).reduce(function(f,p){var y=t.attributes[p];switch(p){case"class":f.attrs.className=y,delete t.attributes.class;break;case"style":f.attrs.style=wt(y);break;default:p.indexOf("aria-")===0||p.indexOf("data-")===0?f.attrs[p.toLowerCase()]=y:f.attrs[He(p)]=y}return f},{attrs:{}}),a=r.style,l=a===void 0?{}:a,i=bt(r,It);return s.attrs.style=G(G({},s.attrs.style),l),e.apply(void 0,[t.tag,G(G({},s.attrs),i)].concat(Se(n)))}var Ke=!1;try{Ke=process.env.NODE_ENV==="production"}catch(e){}function Pt(){if(!Ke&&console&&typeof console.error=="function"){var e;(e=console).error.apply(e,arguments)}}function Ue(e){if(e&&le(e)==="object"&&e.prefix&&e.iconName&&e.icon)return e;if(ce.parse.icon)return ce.parse.icon(e);if(e===null)return null;if(e&&le(e)==="object"&&e.prefix&&e.iconName)return e;if(Array.isArray(e)&&e.length===2)return{prefix:e[0],iconName:e[1]};if(typeof e=="string")return{prefix:"fas",iconName:e}}function he(e,t){return Array.isArray(t)&&t.length>0||!Array.isArray(t)&&t?re({},e,t):{}}var ne=w.forwardRef(function(e,t){var r=e.icon,n=e.mask,s=e.symbol,a=e.className,l=e.title,i=e.titleId,f=e.maskId,p=Ue(r),y=he("classes",[].concat(Se(xt(e)),Se(a.split(" ")))),b=he("transform",typeof e.transform=="string"?ce.parse.transform(e.transform):e.transform),k=he("mask",Ue(n)),C=ce.icon(p,G(G(G(G({},y),b),k),{},{symbol:s,title:l,titleId:i,maskId:f}));if(!C)return Pt("Could not find icon",p),null;var M=C.abstract,_={ref:t};return Object.keys(e).forEach(function(x){ne.defaultProps.hasOwnProperty(x)||(_[x]=e[x])}),Ct(M[0],_)});ne.displayName="FontAwesomeIcon";ne.propTypes={beat:v.bool,border:v.bool,beatFade:v.bool,bounce:v.bool,className:v.string,fade:v.bool,flash:v.bool,mask:v.oneOfType([v.object,v.array,v.string]),maskId:v.string,fixedWidth:v.bool,inverse:v.bool,flip:v.oneOf([!0,!1,"horizontal","vertical","both"]),icon:v.oneOfType([v.object,v.array,v.string]),listItem:v.bool,pull:v.oneOf(["right","left"]),pulse:v.bool,rotation:v.oneOf([0,90,180,270]),shake:v.bool,size:v.oneOf(["2xs","xs","sm","lg","xl","2xl","1x","2x","3x","4x","5x","6x","7x","8x","9x","10x"]),spin:v.bool,spinPulse:v.bool,spinReverse:v.bool,symbol:v.oneOfType([v.bool,v.string]),title:v.string,titleId:v.string,transform:v.oneOfType([v.string,v.object]),swapOpacity:v.bool};ne.defaultProps={border:!1,className:"",mask:null,maskId:null,fixedWidth:!1,inverse:!1,flip:!1,icon:null,listItem:!1,pull:null,pulse:!1,rotation:null,size:null,spin:!1,spinPulse:!1,spinReverse:!1,beat:!1,fade:!1,beatFade:!1,bounce:!1,shake:!1,symbol:!1,title:"",titleId:null,transform:null,swapOpacity:!1};var Ct=Je.bind(null,w.createElement);function Qe({iconObject:e,size:t="lg"}){return P.jsx("div",{className:"ultimate-blocks-icon-render",children:P.jsx(ne,{icon:e.getAttributes(),size:t})})}function xe({targetIcon:e,isEmpty:t=!1,onClick:r}){const n=w.useRef(null),[s,a]=w.useState(!1),l=i=>f=>{f.preventDefault(),f.stopPropagation(),a(i)};return P.jsx("div",{ref:n,className:"ultimate-blocks-icon-card",onMouseEnter:l(!0),onMouseLeave:l(!1),"data-is-empty":t,onClick:i=>{i.preventDefault(),i.stopPropagation(),r(e.getName())},"data-icon":e.getName(),children:!t&&P.jsxs(w.Fragment,{children:[P.jsx(Qe,{iconObject:e}),s&&P.jsx(Te.Popover,{anchor:n.current,children:P.jsx("div",{className:"ultimate-blocks-icon-card-popover-wrap",children:e.getName()})})]})})}function _t({targetViewpoint:e,threshold:t=1,visibleCallback:r=()=>{}}){const n=w.useRef(null);return w.useEffect(()=>{const s={root:e.current,threshold:t},a=new IntersectionObserver(r,s);return a.observe(n.current),()=>{a.disconnect()}},[]),P.jsx("div",{ref:n,className:"ultimate-blocks-intersection-observer",children:"+"})}function Rt({iconList:e,onIconSelect:t,onIconClear:r,maxVisibleCards:n=30}){const s=w.useRef(null),[a,l]=w.useState(0),[i,f]=w.useState(0),[p,y]=w.useState(null),[b,k]=w.useState([]),C=()=>{const x=a*n,N=e.slice(0,x);k(N)};w.useEffect(()=>{const x=Math.ceil(e.length/n);f(x),y(ge()),l(1),C()},[e]),w.useEffect(()=>{p!==null&&(l(a+1),C())},[p]);const M=()=>{const x=b.map(N=>P.jsx(xe,{onClick:t,targetIcon:N},N.getName()));return P.jsxs(w.Fragment,{children:[P.jsx(xe,{isEmpty:!0,targetIcon:new Ie("set_select_empty_icon",{iconName:"clear selection"}),onClick:r},"clear_selection"),x]})},_=()=>P.jsx("div",{className:"no-icon-listing",children:P.jsx("i",{children:We.__("no icon found","ultimate-blocks")})});return P.jsxs("div",{ref:s,className:"ultimate-blocks-icon-listing",children:[e.length>0?M():_(),P.jsx(_t,{targetViewpoint:s,threshold:.5,visibleCallback:()=>{y(ge())}})]})}function jt({frequentList:e=[],listSize:t=4,onSelect:r}){const[n,s]=w.useState([]);return w.useEffect(()=>{const a=e.slice(0,t),l=t-a.length;for(let i=0;i<l;i++)a.push(null);s(a)},[e]),P.jsx("div",{className:"ultimate-blocks-frequent-icon-listing",children:n.map((a,l)=>P.jsx(xe,{targetIcon:a||new Ie("empty",{iconName:"empty"}),isEmpty:a===null,onClick:r},l))})}function At({id:e,onFilterChange:t,iconList:r,onIconSelect:n,onIconClear:s,currentIconObject:a=null,frequentList:l=[]},i){return P.jsx("div",{id:e,className:"ultimate-blocks-icon-control-wrapper",children:P.jsx(Te.Dropdown,{className:"ultimate-blocks-icon-control-dropdown",renderToggle:({onToggle:f})=>P.jsx("div",{id:e,role:"button",onClick:()=>{t(""),f()},className:"ultimate-blocks-icon-control-preview-main",ref:i,children:a&&P.jsx(Qe,{iconObject:a,size:"2xl"})}),renderContent:()=>P.jsxs("div",{className:"ultimate-blocks-icon-list-wrap",children:[P.jsx(it,{onChange:f=>tt.Debouncer(()=>t(f),200,"icon-search-input")}),P.jsx(jt,{frequentList:l,onSelect:n}),P.jsx(Rt,{iconList:r,onIconSelect:n,onIconClear:s})]})})})}const kt=w.forwardRef(At),Nt=(e,t,r=null)=>{const n=r!==null?r:Math.ceil(Date.now()/1e3);return{name:e,count:t,selectionTime:[n]}};function qt(e){this.sessionCacheName=e;const{models:t}=wp.api,r=l=>l.map(i=>(i.count===void 0&&(i.count=0),i)),n=()=>{const l=sessionStorage.getItem(this.sessionCacheName);if(l)try{return JSON.parse(l)}catch(i){sessionStorage.setItem(this.sessionCacheName,null)}return null},s=()=>Z(this,null,function*(){const i=yield new t.Settings().fetch();if(i&&i[this.sessionCacheName])try{return JSON.parse(i[this.sessionCacheName])}catch(f){}return[]}),a=l=>{sessionStorage.setItem(this.sessionCacheName,l)};this.getList=()=>Z(this,null,function*(){return new Promise(l=>Z(this,null,function*(){let i=[];const f=n();if(f!==null)i=r(f);else{const p=yield s();p&&(i=r(p),a(JSON.stringify(i)))}l(i)}))}),this.getListAsIconNames=()=>Z(this,null,function*(){return(yield this.getList()).map(({name:i})=>i)}),this.addFrequentIcon=l=>Z(this,null,function*(){const i=n()||[];if(l&&l!==""){const[f]=i.filter(b=>b.name===l);f?f.count=f.count?Number.parseInt(f.count,10)+1:0:i.push(Nt(l,1));const p=JSON.stringify(i);a(p),yield new t.Settings().save({[this.sessionCacheName]:p})}return i})}function Lt({label:e,id:t=null,onIconSelect:r=()=>{},selectedIcon:n=null,frequentSettingName:s="ub_icon_choices"}){const[a,l]=w.useState(t),[i,f]=w.useState([]),[p,y]=w.useState([]),[b,k]=w.useState(""),[C,M]=w.useState(n),[_,x]=w.useState([]),[N,B]=w.useState(null),q=w.useRef(null),L=w.useRef(!0),c=()=>Z(this,null,function*(){let $=N;$||($=new qt(s),B($));let U=yield $.getList();U=U.sort((W,H)=>{const{count:Q}=W,{count:z}=H;return Q>z?-1:Q<z?1:0});const D=U.map(W=>W.name&&W.name!==""?ee(W.name):null).filter(W=>W!==null);x(D)}),J=w.useRef(!0);w.useEffect(()=>{c()},[i]),w.useEffect(()=>{r(C),J.current||N.addFrequentIcon(C).then(()=>{c()}),J.current=!1},[C]),w.useEffect(()=>{a===null&&l(ge());let $;const U=global||self;if(U.ubIcons)$=U.ubIcons;else{const D=fe(fe({},Ye.fas),ze.fab),W=Object.keys(D).filter(Y=>Object.prototype.hasOwnProperty.call(D,Y)),H=W.map(Y=>D[Y].iconName);$=Array.from(new Set(H)).map(Y=>{let X=null;return W.map(te=>{try{if(D[te].iconName===Y)throw X=te,new Error("match found, stop iteration")}catch(o){}}),X}).map(Y=>new Ie(Y,D[Y])),U.ubIcons=$}f([...$]),y([...$])},[]),w.useEffect(()=>{L.current||oe(b),L.current=!1},[b]);const oe=$=>{let D=$.trim().toLowerCase();D.length<3&&(D="");const W=i.filter(H=>H.getName().includes(D));y(W)},ae=()=>{const{current:$}=q;$&&$.click()},ee=$=>{if($){const[U]=i.filter(D=>D.getName()===$);if(U)return U}return null};return P.jsxs(Te.PanelRow,{className:"ultimate-blocks-icon-control-panel-row",children:[P.jsx("label",{"data-testid":"icon-control-container-label",onClick:ae,htmlFor:a,children:e}),P.jsx(kt,{id:a,ref:q,onFilterChange:k,iconList:p,onIconSelect:M,onIconClear:()=>M(null),currentIconObject:ee(C),frequentList:_})]})}const Ge=e=>Object.keys(e).filter(t=>Object.prototype.hasOwnProperty.call(e,t)).map(t=>e[t]),Mt=Ge(Ye.fas),$t=Ge(ze.fab),Dt=e=>[["fas",Mt],["fab",$t]].reduce((t,[r,n])=>(n.some(({iconName:s})=>s===e)&&(t=r),t),null);function Ft({iconName:e,size:t}){const r=Dt(e),n=()=>!r||!e||e==="",s=()=>({width:`${t}px`,height:`${t}px`});return P.jsx("div",{style:s(),"data-empty":n(),className:"ultimate-blocks-icon-component",children:!n()&&P.jsx(ne,{className:"ultimate-blocks-icon-component-svg-base",icon:[r,e]})})}exports.IconControl=Lt;exports.UbIconComponent=Ft;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
