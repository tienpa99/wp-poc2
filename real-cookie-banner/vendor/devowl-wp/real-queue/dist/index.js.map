{"version":3,"file":"index.js","mappings":"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","sources":["webpack://devowl-local-files/real-queue/default/webpack/runtime/chunk loaded","webpack://devowl-local-files/real-queue/default/src/utils/localStorageTest.tsx","webpack://devowl-local-files/real-queue/default/external var \"devowlWp_utils\"","webpack://devowl-local-files/real-queue/default/src/utils/request.tsx","webpack://devowl-local-files/real-queue/default/src/utils/i18n.tsx","webpack://devowl-local-files/real-queue/default/src/utils/ready.tsx","webpack://devowl-local-files/real-queue/default/src/utils/waitObject.tsx","webpack://devowl-local-files/real-queue/default/src/utils/index.tsx","webpack://devowl-local-files/real-queue/default/src/queue/tabBridge/lockTab.tsx","webpack://devowl-local-files/real-queue/default/src/queue/tabBridge/notifyWorkerTab.tsx","webpack://devowl-local-files/real-queue/default/src/queue/tabBridge/clearNotifications.tsx","webpack://devowl-local-files/real-queue/default/src/queue/tabBridge/checkNotifications.tsx","webpack://devowl-local-files/real-queue/default/src/types/events/remaining.tsx","webpack://devowl-local-files/real-queue/default/src/wp-api/jobs.get.tsx","webpack://devowl-local-files/real-queue/default/src/types/events/jobDone.tsx","webpack://devowl-local-files/real-queue/default/src/types/events/jobsDeleted.tsx","webpack://devowl-local-files/real-queue/default/src/types/events/jobsRetried.tsx","webpack://devowl-local-files/real-queue/default/src/types/events/clientJob.tsx","webpack://devowl-local-files/real-queue/default/src/wp-api/job.get.tsx","webpack://devowl-local-files/real-queue/default/src/queue/job/fetchJob.tsx","webpack://devowl-local-files/real-queue/default/src/types/events/jobsSkipped.tsx","webpack://devowl-local-files/real-queue/default/src/wp-api/jobResult.post.tsx","webpack://devowl-local-files/real-queue/default/src/queue/job/saveJobResult.tsx","webpack://devowl-local-files/real-queue/default/src/queue/activityDetector.tsx","webpack://devowl-local-files/real-queue/default/src/types/events/jobDelay.tsx","webpack://devowl-local-files/real-queue/default/src/queue/job/delay.tsx","webpack://devowl-local-files/real-queue/default/src/queue/restoreFromLocalStorage.tsx","webpack://devowl-local-files/real-queue/default/src/queue/client/executor.tsx","webpack://devowl-local-files/real-queue/default/src/queue/client/clientJobToPromise.tsx","webpack://devowl-local-files/real-queue/default/src/wp-api/job.post.tsx","webpack://devowl-local-files/real-queue/default/src/queue/server/executor.tsx","webpack://devowl-local-files/real-queue/default/src/queue/server/serverJobToPromise.tsx","webpack://devowl-local-files/real-queue/default/src/queue/queueClass.tsx","webpack://devowl-local-files/real-queue/default/src/queue/global.tsx","webpack://devowl-local-files/real-queue/default/src/queue/job/jobToPopulateNextJobs.tsx","webpack://devowl-local-files/real-queue/default/src/types/events/statusAdditionalData.tsx","webpack://devowl-local-files/real-queue/default/src/types/events/status.tsx","webpack://devowl-local-files/real-queue/default/src/wp-api/status.get.tsx","webpack://devowl-local-files/real-queue/default/src/queue/fetchStatus.tsx","webpack://devowl-local-files/real-queue/default/src/queue/refreshQueue.tsx","webpack://devowl-local-files/real-queue/default/src/components/provider.tsx","webpack://devowl-local-files/real-queue/default/src/hooks/useStatusErrors.tsx","webpack://devowl-local-files/real-queue/default/src/wp-api/jobs.delete.tsx","webpack://devowl-local-files/real-queue/default/src/queue/job/deleteJobs.tsx","webpack://devowl-local-files/real-queue/default/src/wp-api/jobsRetry.post.tsx","webpack://devowl-local-files/real-queue/default/src/queue/job/retryJobs.tsx","webpack://devowl-local-files/real-queue/default/src/wp-api/jobsSkip.post.tsx","webpack://devowl-local-files/real-queue/default/src/queue/job/skipJobs.tsx","webpack://devowl-local-files/real-queue/default/src/components/errorModal/listItem.tsx","webpack://devowl-local-files/real-queue/default/src/components/errorModal/list.tsx","webpack://devowl-local-files/real-queue/default/src/components/errorModal/modal.tsx","webpack://devowl-local-files/real-queue/default/src/hooks/useProgress.tsx","webpack://devowl-local-files/real-queue/default/src/index.tsx","webpack://devowl-local-files/real-queue/default/external var \"React\"","webpack://devowl-local-files/real-queue/default/external var \"ReactDOM\"","webpack://devowl-local-files/real-queue/default/webpack/bootstrap","webpack://devowl-local-files/real-queue/default/webpack/runtime/compat get default export","webpack://devowl-local-files/real-queue/default/webpack/runtime/define property getters","webpack://devowl-local-files/real-queue/default/webpack/runtime/global","webpack://devowl-local-files/real-queue/default/webpack/runtime/hasOwnProperty shorthand","webpack://devowl-local-files/real-queue/default/webpack/runtime/make namespace object","webpack://devowl-local-files/real-queue/default/webpack/runtime/jsonp chunk loading","webpack://devowl-local-files/real-queue/default/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","let memoizeSupported = undefined;\n\n/**\n * Checks if localStorage is available. E.g. private modes in browsers\n * does not allow to write to localStorage.\n */\nfunction localStorageTest() {\n  if (typeof memoizeSupported === \"boolean\") {\n    return memoizeSupported;\n  }\n  const test = \"real-queue-test\";\n  try {\n    localStorage.setItem(test, test);\n    localStorage.removeItem(test);\n    memoizeSupported = true;\n    return true;\n  } catch (e) {\n    memoizeSupported = false;\n    return false;\n  }\n}\nexport { localStorageTest };","const __WEBPACK_NAMESPACE_OBJECT__ = devowlWp_utils;","/* istanbul ignore file: this file does not contain any logic, only factory calls */\n\nimport { createRequestFactory, BaseOptions } from \"@devowl-wp/utils\";\n\n// Only needed once per `window`\nlet FACTORY_MEMO;\nfunction get() {\n  return FACTORY_MEMO ? FACTORY_MEMO : FACTORY_MEMO = createRequestFactory(window[BaseOptions.getPureSlug(process.env.slug, true)]);\n}\nconst urlBuilder = function () {\n  return get().urlBuilder(...arguments);\n};\nconst request = function () {\n  return get().request(...arguments);\n};\nexport { urlBuilder, request };","/* istanbul ignore file: this file does not contain any logic, only factory calls */\n\nimport { createLocalizationFactory } from \"@devowl-wp/utils\";\n\n// Only needed once per `window`\nlet FACTORY_MEMO;\nfunction get() {\n  return FACTORY_MEMO ? FACTORY_MEMO : FACTORY_MEMO = createLocalizationFactory(`${process.env.rootSlug}-${process.env.slug}`);\n}\nconst _n = function () {\n  return get()._n(...arguments);\n};\nconst _nx = function () {\n  return get()._nx(...arguments);\n};\nconst _x = function () {\n  return get()._x(...arguments);\n};\nconst __ = function () {\n  return get().__(...arguments);\n};\nconst _i = function () {\n  return get()._i(...arguments);\n};\nexport { _n, _nx, _x, __, _i };","/**\n * Wait DOM is ready depending on a state.\n *\n * - `interactive`: Defer scripts are executing, but DOM is ready\n * - `complete`: All scripts including deferred ones are executed and DOM is ready\n *\n * @see https://stackoverflow.com/a/65430734/5506547\n * @see https://stackoverflow.com/a/51980980/5506547\n */\nconst ready = function (fn) {\n  let state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"complete\";\n  return new Promise(resolve => {\n    if (document.readyState === state) {\n      fn?.();\n      resolve();\n    } else {\n      document.addEventListener(\"readystatechange\", () => {\n        if (document.readyState === state) {\n          fn?.();\n          resolve();\n        }\n      });\n    }\n  });\n};\nexport { ready };","/**\n * Wait for a given object which is calculated through a callback.\n */\nasync function waitObject(getObject) {\n  let delayNextCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;\n  let maxTries = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let i = 0;\n  while (!getObject()) {\n    if (maxTries > 0 && i >= maxTries) {\n      return undefined;\n    }\n    await new Promise(r => setTimeout(r, delayNextCheck));\n    i++;\n  }\n  return getObject();\n}\nexport { waitObject };","/* istanbul ignore file: this file does not contain any logic, only factory calls */\n\nimport { BaseOptions } from \"@devowl-wp/utils\";\nconst getStaticOptions = () => window[BaseOptions.getPureSlug(process.env.slug, true)].others;\nexport { getStaticOptions };\nexport * from \"./request\";\nexport * from \"./i18n\";\nexport * from \"./ready\";\nexport * from \"./localStorageTest\";\nexport * from \"./waitObject\";","import { getStaticOptions, localStorageTest } from \"../../utils\";\nconst LOCAL_STORAGE_KEY_LOCK_TAB = \"real-queue-lock-tab\";\nlet keepUpToDateInterval;\n\n/**\n * Lock this tab as \"current runner\". This allows you to run the queue only in one tab.\n *\n * @return `true` when the current tab is locked and should not process any jobs\n */\nfunction lockTab(state) {\n  if (localStorageTest()) {\n    const lsKey = `${LOCAL_STORAGE_KEY_LOCK_TAB}-${getStaticOptions().localStorageSuffix}`;\n    if (typeof state === \"boolean\") {\n      clearInterval(keepUpToDateInterval);\n    }\n    if (state === true) {\n      const fnWrite = () => localStorage.setItem(lsKey, new Date().getTime().toString());\n      fnWrite();\n      keepUpToDateInterval = setInterval(fnWrite, 3000);\n    } else if (state === false) {\n      localStorage.removeItem(lsKey);\n    }\n    const currentValue = +localStorage.getItem(lsKey);\n    if (currentValue === 0 || isNaN(currentValue)) {\n      return false;\n    }\n    return new Date().getTime() - currentValue < 7000;\n  }\n  return false;\n}\nexport { LOCAL_STORAGE_KEY_LOCK_TAB, lockTab };","import { getStaticOptions, localStorageTest } from \"../../utils\";\nconst LOCAL_STORAGE_KEY_QUEUE_NOTIFY_WORKER_PREFIX = \"real-queue-notify-worker-\";\n/**\n * Notify worker tab to do something.\n */\nfunction notifyWorkerTab(data) {\n  if (localStorageTest()) {\n    const lsKey = `${LOCAL_STORAGE_KEY_QUEUE_NOTIFY_WORKER_PREFIX}${getStaticOptions().localStorageSuffix}-${new Date().getTime()}`;\n    localStorage.setItem(lsKey, JSON.stringify(data));\n    return true;\n  }\n  return false;\n}\nexport { notifyWorkerTab, LOCAL_STORAGE_KEY_QUEUE_NOTIFY_WORKER_PREFIX };","import { getStaticOptions, localStorageTest } from \"../../utils\";\nimport { LOCAL_STORAGE_KEY_QUEUE_NOTIFY_WORKER_PREFIX } from \".\";\n\n/**\n * Clear all worker notifications.\n */\nfunction clearWorkerNotifications() {\n  if (localStorageTest()) {\n    const lsPrefix = `${LOCAL_STORAGE_KEY_QUEUE_NOTIFY_WORKER_PREFIX}${getStaticOptions().localStorageSuffix}`;\n    for (const lsEntryName of Object.keys(localStorage)) {\n      if (lsEntryName.startsWith(lsPrefix)) {\n        localStorage.removeItem(lsEntryName);\n      }\n    }\n    return true;\n  }\n  return false;\n}\nexport { clearWorkerNotifications };","import { getStaticOptions, localStorageTest } from \"../../utils\";\nimport { LOCAL_STORAGE_KEY_QUEUE_NOTIFY_WORKER_PREFIX } from \".\";\n\n/**\n * Check existing worker notifications and execute a given callback.\n */\nfunction checkWorkerNotifications(callbacks) {\n  if (localStorageTest()) {\n    const lsPrefix = `${LOCAL_STORAGE_KEY_QUEUE_NOTIFY_WORKER_PREFIX}${getStaticOptions().localStorageSuffix}`;\n    for (const lsEntryName of Object.keys(localStorage)) {\n      if (lsEntryName.startsWith(lsPrefix)) {\n        const {\n          event,\n          data\n        } = JSON.parse(localStorage.getItem(lsEntryName));\n        localStorage.removeItem(lsEntryName);\n        callbacks[event]?.(data);\n      }\n    }\n    return true;\n  }\n  return false;\n}\nexport { checkWorkerNotifications };","/**\n * This event is dispatched when the queue got updated and remaining counts got changed.\n */\nexport const REMAINING_EVENT = \"RealQueue/Remaining\";","import { RouteHttpVerb } from \"@devowl-wp/utils\";\nexport const locationRestJobsGet = {\n  path: \"/jobs\",\n  method: RouteHttpVerb.GET\n};","export const JOB_DONE_EVENT_PREFIX = \"RealQueue/JobDone/\";","export const JOBS_DELETED_EVENT = \"RealQueue/JobsDeleted\";","export const JOBS_RETRIED_EVENT = \"RealQueue/JobsRetried\";","/**\n * You need to append the `type` to the event name, e.g. `RealQueue/ClientJob/example`.\n *\n * This should execute the client job via JavaScript. Keep in mind, that you need to manually\n * update the process via a server request for each item! See also the PHP class\n * `DevOwl\\RealQueue\\queue\\Job#worker` for more information.\n *\n * You are allowed to throw errors, this causes the client job to be retried according to `retries`.\n */\nexport const CLIENT_JOB_EVENT_PREFIX = \"RealQueue/ClientJob/\";","import { RouteHttpVerb } from \"@devowl-wp/utils\";\nexport const locationRestJobGet = {\n  path: \"/job/:id\",\n  method: RouteHttpVerb.GET\n};","import { request } from \"../../utils\";\nimport { locationRestJobGet } from \"../../wp-api\";\n\n/**\n * Fetch job by id. Additionally, you can set a `lock` boolean so other tabs could\n * not process this job furthermore. This is useful for client jobs.\n */\nasync function fetchJob(id, lock) {\n  return await request({\n    location: locationRestJobGet,\n    params: {\n      id,\n      lock\n    }\n  });\n}\nexport { fetchJob };","export const JOBS_SKIPPED_EVENT = \"RealQueue/JobsSkipped\";","import { RouteHttpVerb } from \"@devowl-wp/utils\";\nexport const locationRestJobResultPost = {\n  path: \"/job/:id/result\",\n  method: RouteHttpVerb.POST\n};","import { JOBS_DELETED_EVENT, JOBS_RETRIED_EVENT, JOBS_SKIPPED_EVENT } from \"../../types\";\nimport { request } from \"../../utils\";\nimport { locationRestJobResultPost } from \"../../wp-api\";\nasync function saveJobResult(id, process) {\n  let exception = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    code: errorCode,\n    message: errorMessage,\n    data: errorData\n  } = exception;\n  try {\n    const result = await request({\n      location: locationRestJobResultPost,\n      request: {\n        process,\n        errorCode,\n        errorMessage,\n        errorData: errorData ? JSON.stringify(errorData) : undefined\n      },\n      params: {\n        id\n      }\n    });\n    if (result.pauseToAvoidRecurringException) {\n      await new Promise(resolve => {\n        const {\n          job: {\n            type\n          }\n        } = result;\n\n        // Wait for user reactivates (delete, retry) the job\n        const listenerDeleted = async _ref => {\n          let {\n            detail: {\n              params: {\n                type: deletedType\n              }\n            }\n          } = _ref;\n          if (deletedType === type) {\n            document.removeEventListener(JOBS_DELETED_EVENT, listenerDeleted);\n            resolve();\n          }\n        };\n        const listenerRetried = async _ref2 => {\n          let {\n            detail: {\n              request: {\n                type: retriedType\n              }\n            }\n          } = _ref2;\n          if (retriedType === type) {\n            document.removeEventListener(JOBS_RETRIED_EVENT, listenerRetried);\n            resolve();\n          }\n        };\n        const listenerSkipped = async _ref3 => {\n          let {\n            detail: {\n              request: {\n                type: skippedType\n              }\n            }\n          } = _ref3;\n          if (skippedType === type) {\n            document.removeEventListener(JOBS_RETRIED_EVENT, listenerRetried);\n            resolve();\n          }\n        };\n        document.addEventListener(JOBS_DELETED_EVENT, listenerDeleted);\n        document.addEventListener(JOBS_RETRIED_EVENT, listenerRetried);\n        document.addEventListener(JOBS_SKIPPED_EVENT, listenerSkipped);\n      });\n    }\n    return result;\n  } catch (e) {\n    // Something went wrong - but this should not be the case as we should always be able to store\n    // job results. Let's wait a bit and try again\n    await new Promise(resolve => setTimeout(resolve, 60 * 1000));\n    return await saveJobResult(id, process, exception);\n  }\n}\nexport { saveJobResult };","import create from \"activity-detector\";\nconst WINDOW_ACTIVITY_DETECTOR_IS_ACTIVE_KEY = \"realQueueIsIdle\";\n/**\n * Detect idle time. You can get the state from `window.realQueueIsIdle [boolean]`.\n */\nfunction createActivityDetector() {\n  const activityDetector = create({\n    autoInit: false\n  });\n  activityDetector.on(\"idle\", () => {\n    window[WINDOW_ACTIVITY_DETECTOR_IS_ACTIVE_KEY] = true;\n  });\n  activityDetector.on(\"active\", () => {\n    window[WINDOW_ACTIVITY_DETECTOR_IS_ACTIVE_KEY] = false;\n  });\n\n  // I want to start the activity detector now!\n  activityDetector.init();\n}\nexport { createActivityDetector, WINDOW_ACTIVITY_DETECTOR_IS_ACTIVE_KEY };","export const JOB_DELAY_EVENT_PREFIX = \"RealQueue/JobDelay/\";","import { WINDOW_ACTIVITY_DETECTOR_IS_ACTIVE_KEY } from \"..\";\nimport { JOB_DELAY_EVENT_PREFIX } from \"../../types\";\n\n/**\n * Delay a job with the defined `delay_ms`.\n */\nfunction jobDelay(job) {\n  const isIdle = !!window[WINDOW_ACTIVITY_DETECTOR_IS_ACTIVE_KEY];\n  const {\n    type,\n    delay_ms\n  } = job;\n  const settings = {\n    delay_ms\n  };\n  document.dispatchEvent(new CustomEvent(`${JOB_DELAY_EVENT_PREFIX}${type}`, {\n    detail: {\n      job,\n      isIdle,\n      settings\n    }\n  }));\n  return new Promise(resolve => setTimeout(resolve, settings.delay_ms));\n}\nexport { jobDelay };","import { getStaticOptions, localStorageTest, request } from \"../utils\";\nimport { getGlobalQueue } from \".\";\nimport { locationRestJobsGet } from \"../wp-api\";\nimport { REMAINING_EVENT } from \"../types\";\n/**\n * Allows to restore jobs from the local storage. This is helpful especially\n * when the jobs got locked by the server and could not be \"restored the next time\".\n */\nconst LOCAL_STORAGE_KEY_RESTORE_JOBS = \"real-queue-restore-jobs\";\n\n/**\n * Fetch the next list of jobs so we can populate to our queue.\n */\nasync function restoreJobsFromLocalStorage() {\n  let queueClass = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getGlobalQueue().enqueueHandler();\n  if (localStorageTest()) {\n    const lsKey = `${LOCAL_STORAGE_KEY_RESTORE_JOBS}-${getStaticOptions().localStorageSuffix}`;\n    const ids = localStorage.getItem(lsKey);\n    localStorage.removeItem(lsKey);\n    if (ids) {\n      try {\n        const {\n          jobs,\n          remaining\n        } = await request({\n          location: locationRestJobsGet,\n          params: {\n            ids\n          }\n        });\n        const unfinished = jobs.filter(_ref => {\n          let {\n            process,\n            process_total,\n            runs,\n            retries,\n            locked\n          } = _ref;\n          return process < process_total && runs < retries + 1 && !locked;\n        });\n        queueClass.enqueueFromList(unfinished);\n        getStaticOptions().remaining = remaining;\n        document.dispatchEvent(new CustomEvent(REMAINING_EVENT, {\n          detail: {\n            remaining\n          }\n        }));\n\n        // Save back the \"unfinished\" jobs so dangling jobs are automatically removed\n        localStorage.setItem(lsKey, unfinished.map(_ref2 => {\n          let {\n            id\n          } = _ref2;\n          return id;\n        }).join(\",\"));\n        return unfinished.length > 0;\n      } catch (e) {\n        // Silence is golden.\n      }\n    }\n  }\n  return false;\n}\nexport { LOCAL_STORAGE_KEY_RESTORE_JOBS, restoreJobsFromLocalStorage };","import { CLIENT_JOB_EVENT_PREFIX } from \"../../types\";\nimport { LOCAL_STORAGE_KEY_RESTORE_JOBS, fetchJob, saveJobResult, jobDelay } from \"..\";\nimport { getStaticOptions, localStorageTest } from \"../../utils\";\n\n/**\n * Execute a client job.\n */\nasync function executeClientJob(job) {\n  let run = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let result = false;\n  const {\n    id,\n    type,\n    retries\n  } = job;\n  try {\n    await new Promise((resolve, reject) => {\n      document.dispatchEvent(new CustomEvent(`${CLIENT_JOB_EVENT_PREFIX}${type}`, {\n        detail: {\n          job,\n          resolve,\n          reject,\n          run,\n          fetchJob,\n          saveJobResult\n        }\n      }));\n    });\n    result = true;\n  } catch (e) {\n    if (run < retries) {\n      await jobDelay(job);\n      result = await executeClientJob(job, run + 1);\n    } else {\n      await saveJobResult(id, 0, e);\n      result = false;\n    }\n  }\n\n  // Remove from our localStorage, as we do not need to restore it no longer\n  if (run === 0 && localStorageTest()) {\n    const lsKey = `${LOCAL_STORAGE_KEY_RESTORE_JOBS}-${getStaticOptions().localStorageSuffix}`;\n    const restorable = localStorage.getItem(lsKey)?.split(\",\").map(Number) || [];\n    const idx = restorable.indexOf(id);\n    if (idx > -1) {\n      restorable.splice(idx, 1);\n    }\n    localStorage.setItem(lsKey, restorable.join(\",\"));\n  }\n  return result;\n}\nexport { executeClientJob };","import { JOB_DONE_EVENT_PREFIX } from \"../../types\";\nimport { REMAINING_EVENT } from \"../../types\";\nimport { executeClientJob } from \".\";\nimport { getStaticOptions } from \"../../utils\";\nimport { jobDelay } from \"..\";\n\n/**\n * Convert a client job to promise.\n */\nfunction convertClientJobToPromise(queue, job) {\n  const {\n    type\n  } = job;\n  const fn = async () => {\n    const updateRemaining = () => {\n      const {\n        remaining\n      } = getStaticOptions();\n      if (remaining[type]) {\n        remaining[type][0] -= 1;\n      }\n      document.dispatchEvent(new CustomEvent(REMAINING_EVENT, {\n        detail: {\n          remaining\n        }\n      }));\n    };\n    try {\n      const success = await executeClientJob(job);\n      updateRemaining();\n      document.dispatchEvent(new CustomEvent(`${JOB_DONE_EVENT_PREFIX}${type}`, {\n        detail: {\n          job,\n          success\n        }\n      }));\n    } catch (e) {\n      // Something went wrong between request and executor - we pause the queue here cause\n      // we wait for the next refresh of the page.\n      queue.pause();\n    }\n  };\n  const delay = () => jobDelay(job);\n  return [fn, delay];\n}\nexport { convertClientJobToPromise };","import { RouteHttpVerb } from \"@devowl-wp/utils\";\nexport const locationRestJobExecute = {\n  path: \"/job/:id\",\n  method: RouteHttpVerb.POST\n};","import { REMAINING_EVENT } from \"../../types\";\nimport { getStaticOptions, localStorageTest, request } from \"../../utils\";\nimport { locationRestJobExecute } from \"../../wp-api\";\nimport { LOCAL_STORAGE_KEY_RESTORE_JOBS } from \"../restoreFromLocalStorage\";\n\n/**\n * Execute a server job. This can potentially execute more jobs by IDs to get rid\n * of requests overhead.\n */\nasync function executeServerJob(job, tryIds) {\n  const {\n    id,\n    delay_ms\n  } = job;\n  const result = await request({\n    location: locationRestJobExecute,\n    request: {\n      try: tryIds.join(\",\")\n    },\n    params: {\n      id\n    }\n  });\n\n  // TODO: implement `pause`\n  const {\n    done,\n    failed,\n    remaining\n  } = result;\n\n  // Override global state\n  getStaticOptions().remaining = remaining;\n  document.dispatchEvent(new CustomEvent(REMAINING_EVENT, {\n    detail: {\n      remaining\n    }\n  }));\n\n  // Is the passed `job` failed?\n  const [failedJob] = failed.filter(_ref => {\n    let {\n      id: failedId\n    } = _ref;\n    return failedId === id;\n  });\n  const [doneJob] = done.filter(_ref2 => {\n    let {\n      id: doneId\n    } = _ref2;\n    return doneId === id;\n  });\n  if (\n  // Check if the requested job is completely processed and retry again\n  done.length === 0 && !failedJob ||\n  // Check if the requested job needs to be retried cause it failed\n  failedJob && failedJob.runs <= failedJob.retries) {\n    await new Promise(resolve => setTimeout(resolve, delay_ms));\n    return executeServerJob(job, tryIds);\n  }\n\n  // Is the passed `job` completed?\n  if (\n  // Our job is already processed by another worker? Perhaps another tab? Perhaps cronjob? We do not know\n  (failedJob?.exception?.errors?.[\"real_queue_job_locked\"] || doneJob || failedJob && failedJob.runs > failedJob.retries) && localStorageTest()) {\n    // Remove from our localStorage, as we do not need to restore it no more\n    const lsKey = `${LOCAL_STORAGE_KEY_RESTORE_JOBS}-${getStaticOptions().localStorageSuffix}`;\n    const restorable = localStorage.getItem(lsKey)?.split(\",\").map(Number) || [];\n    const idx = restorable.indexOf(id);\n    if (idx > -1) {\n      restorable.splice(idx, 1);\n    }\n    localStorage.setItem(lsKey, restorable.join(\",\"));\n  }\n  return result;\n}\nexport { executeServerJob };","import { JOB_DONE_EVENT_PREFIX } from \"../../types\";\nimport { executeServerJob } from \"./executor\";\nimport { jobDelay } from \"..\";\n\n/**\n * Memorize all executed server jobs to avoid multiple executions.\n * Why: We have created a task for each job, but on server side we\n * are executing jobs iteratively until max execution time exceeded.\n *\n * Simply said: One network request could potentially execute\n * multiple jobs.\n */\nconst SUCCESSFUL_SERVER_JOBS = [];\n\n/**\n * Convert a server job to promise.\n *\n * @param tryIds All the Job IDs which should be also be tried with this single request\n */\nfunction convertServerJobToPromise(queue, job, tryIds) {\n  const {\n    id,\n    type\n  } = job;\n  const fn = async () => {\n    const dispatchDoneEvent = success => document.dispatchEvent(new CustomEvent(`${JOB_DONE_EVENT_PREFIX}${type}`, {\n      detail: {\n        job,\n        success\n      }\n    }));\n    if (SUCCESSFUL_SERVER_JOBS.indexOf(id) > -1) {\n      // Job already executed, skip this!\n      dispatchDoneEvent(true);\n      return;\n    }\n    try {\n      const {\n        done\n      } = await executeServerJob(job, tryIds);\n      SUCCESSFUL_SERVER_JOBS.push(...done.map(_ref => {\n        let {\n          id\n        } = _ref;\n        return id;\n      }));\n      dispatchDoneEvent(SUCCESSFUL_SERVER_JOBS.indexOf(id) > -1);\n    } catch (e) {\n      // Something went wrong between request and WP REST API - we pause the queue here cause\n      // we wait for the next refresh of the page - the REST API response is always valid and\n      // does not throw any error\n      queue.pause();\n    }\n  };\n  const delay = () => SUCCESSFUL_SERVER_JOBS.indexOf(id) > -1 ? Promise.resolve() : jobDelay(job);\n  return [fn, delay];\n}\nexport { convertServerJobToPromise };","import { JOBS_DELETED_EVENT, JOBS_RETRIED_EVENT, JOB_DONE_EVENT_PREFIX } from \"../types\";\nimport { createJobToPopulateNextJobs, LOCAL_STORAGE_KEY_RESTORE_JOBS, convertClientJobToPromise, convertServerJobToPromise } from \".\";\nimport { getStaticOptions, localStorageTest } from \"../utils\";\n/**\n * This class should be minimal so we can control the queue items itself.\n *\n * @see https://github.com/sindresorhus/p-queue#custom-RealQueueClass\n * @see https://github.com/sindresorhus/p-queue/blob/76b81cd707a6cd31b41f25e5d7fa8abc7486c4bf/source/priority-queue.ts#L12\n */\nclass RealQueueClass {\n  constructor() {\n    this.queue = [];\n    this.alreadyAddedJobIds = [];\n    this._handler = void 0;\n    this.queue = [];\n    this.listenRetries();\n    this.listenDeletions();\n  }\n  enqueueFromList(list) {\n    const tryJobIds = list.filter(_ref => {\n      let {\n        worker\n      } = _ref;\n      return worker === \"server\";\n    }).map(_ref2 => {\n      let {\n        id\n      } = _ref2;\n      return id;\n    });\n    const jobs = [];\n    const {\n      handler,\n      alreadyAddedJobIds\n    } = this;\n    for (const job of list) {\n      const {\n        id,\n        type\n      } = job;\n\n      // Avoid duplicate items\n      if (alreadyAddedJobIds.indexOf(id) > -1) {\n        continue;\n      }\n      if (job.worker === \"client\") {\n        jobs.push({\n          runs: convertClientJobToPromise(handler, job),\n          job\n        });\n      } else {\n        // The next request is not allowed to retry the previous one\n        tryJobIds.splice(tryJobIds.indexOf(id), 1);\n        jobs.push({\n          runs: convertServerJobToPromise(handler, job, [/* pass immutable */...tryJobIds]),\n          job\n        });\n      }\n      alreadyAddedJobIds.push(id);\n\n      // Listen to failed job and make the job available again to retry\n      const listenerFailedEvent = `${JOB_DONE_EVENT_PREFIX}${type}`;\n      const listenerFailed = _ref3 => {\n        let {\n          detail: {\n            job: {\n              id: doneJobId\n            },\n            success\n          }\n        } = _ref3;\n        if (doneJobId === id && !success) {\n          document.removeEventListener(listenerFailedEvent, listenerFailed);\n          const alreadyIdx = this.alreadyAddedJobIds.indexOf(doneJobId);\n          if (alreadyIdx > -1) {\n            this.alreadyAddedJobIds.splice(alreadyIdx, 1);\n          }\n        }\n      };\n      document.addEventListener(listenerFailedEvent, listenerFailed);\n    }\n\n    // Add a refresh job to populate our queue with the next \"list\"\n    if (jobs.length > 0) {\n      const previousAt = jobs.length > 40 ? 10 : 0;\n      const {\n        job: previousJob\n      } = jobs[previousAt];\n      jobs.splice(jobs.length - previousAt, 0, {\n        runs: [createJobToPopulateNextJobs(list[list.length - 1].id, this)],\n        job: previousJob\n      });\n    }\n\n    // Make this list restorable from the localStorage\n    if (localStorageTest()) {\n      const lsKey = `${LOCAL_STORAGE_KEY_RESTORE_JOBS}-${getStaticOptions().localStorageSuffix}`;\n      const restorable = localStorage.getItem(lsKey)?.split(\",\").map(Number) || [];\n      list.forEach(_ref4 => {\n        let {\n          id\n        } = _ref4;\n        return restorable.indexOf(id) === -1 && restorable.push(id);\n      });\n      localStorage.setItem(lsKey, restorable.join(\",\"));\n    }\n    jobs.forEach(_ref5 => {\n      let {\n        job,\n        runs\n      } = _ref5;\n      handler.addAll(runs, {\n        job\n      });\n    });\n  }\n  enqueue(run, options) {\n    if (!options?.job) {\n      throw new Error(`Please provide a job object!`);\n    }\n    const {\n      job: {\n        id,\n        type\n      }\n    } = options;\n    const element = {\n      ...options,\n      id,\n      type,\n      run\n    };\n    this.queue.push(element);\n  }\n  dequeue() {\n    const item = this.queue.shift();\n    return item?.run;\n  }\n  get size() {\n    return this.queue.length;\n  }\n  filterQueueItem(options) {\n    return this.queue.filter(_ref6 => {\n      let {\n        id,\n        type\n      } = _ref6;\n      if (typeof options.id !== \"undefined\" && id !== options.id) {\n        return false;\n      }\n      if (typeof options.type !== \"undefined\" && type !== options.type) {\n        return false;\n      }\n      return true;\n    });\n  }\n  filter(options) {\n    return this.filterQueueItem(options).map(element => element.run);\n  }\n  get handler() {\n    return this._handler;\n  }\n  setHandler(handler) {\n    this._handler = handler;\n  }\n  removeByType(type) {\n    let forgetAboutAlreadyAdded = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const removedIds = [];\n    this.queue = this.queue.filter(item => {\n      const result = item.type !== type;\n      if (!result) {\n        removedIds.push(item.id);\n      }\n      return result;\n    });\n    if (forgetAboutAlreadyAdded) {\n      this.alreadyAddedJobIds = this.alreadyAddedJobIds.filter(id => removedIds.indexOf(id) === -1);\n    }\n  }\n\n  /**\n   * Listen if jobs got deleted, remove them from the queue so they never get executed again.\n   */\n  listenDeletions() {\n    const listener = async _ref7 => {\n      let {\n        detail: {\n          params: {\n            type\n          }\n        }\n      } = _ref7;\n      this.removeByType(type, false);\n    };\n    document.addEventListener(JOBS_DELETED_EVENT, listener);\n  }\n\n  /**\n   * Listen if jobs got retried, remove them from the queue so they can be added again.\n   */\n  listenRetries() {\n    const listener = async _ref8 => {\n      let {\n        detail: {\n          request: {\n            type\n          }\n        }\n      } = _ref8;\n      this.removeByType(type);\n    };\n    document.addEventListener(JOBS_RETRIED_EVENT, listener);\n  }\n}\nexport { RealQueueClass };","import PQueue from \"p-queue\";\nimport { RealQueueClass } from \".\";\n/**\n * Create a page-wide queue saved in `window`.\n */\nfunction getGlobalQueue() {\n  if (!window.realQueueInstance) {\n    const queue = new PQueue({\n      autoStart: true,\n      concurrency: 1,\n      queueClass: RealQueueClass\n    });\n\n    // By default, the p-queue does not expose the queue class\n    queue.enqueueHandler = function () {\n      return this._queue;\n    };\n\n    // This is a bit hacky, but currently the only way to access the parent instance (?!)\n    window.realQueueInstance = queue;\n    window.realQueueInstance.enqueueHandler().setHandler(window.realQueueInstance);\n  }\n  return window.realQueueInstance;\n}\nexport { getGlobalQueue };","import { REMAINING_EVENT } from \"../../types\";\nimport { getStaticOptions, request } from \"../../utils\";\nimport { locationRestJobsGet } from \"../../wp-api\";\nimport { getGlobalQueue } from \"..\";\n\n/**\n * Fetch the next list of jobs so we can populate to our queue.\n */\nfunction createJobToPopulateNextJobs(afterJobId) {\n  let queueClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getGlobalQueue().enqueueHandler();\n  return async () => {\n    try {\n      const {\n        jobs,\n        remaining\n      } = await request({\n        location: locationRestJobsGet,\n        params: {\n          after: afterJobId\n        }\n      });\n      getStaticOptions().remaining = remaining;\n      document.dispatchEvent(new CustomEvent(REMAINING_EVENT, {\n        detail: {\n          remaining\n        }\n      }));\n      queueClass.enqueueFromList(jobs);\n    } catch (e) {\n      // Something went wrong between request and WP REST API - we pause the queue here cause\n      // we wait for the next refresh of the page - the REST API response is always valid and\n      // does not throw any error\n      queueClass.handler.pause();\n    }\n  };\n}\nexport { createJobToPopulateNextJobs };","export const STATUS_ADDITIONAL_DATA_EVENT = \"RealQueue/Status/AdditionalData\";","/**\n * This event is dispatched when the queue got a status update.\n * See also `fetchStatus`.\n */\nexport const STATUS_EVENT = \"RealQueue/Status\";","import { RouteHttpVerb } from \"@devowl-wp/utils\";\nexport const locationRestStatusGet = {\n  path: \"/status\",\n  method: RouteHttpVerb.GET\n};","import { STATUS_ADDITIONAL_DATA_EVENT } from \"../types\";\nimport { STATUS_EVENT } from \"../types\";\nimport { request } from \"../utils\";\nimport { locationRestStatusGet } from \"../wp-api\";\nimport { getGlobalQueue, refreshQueue } from \".\";\nlet timeout;\nlet currentlyFetching = false;\n\n/**\n * Fetch the status of the complete queue in a given interval. In general, the queue pulls always\n * the status, but you could change the interval to provide a more \"up-to-date\" UI to your users.\n *\n * You need to listen to the fetch-status event.\n */\nasync function fetchStatus() {\n  let intervalOrImmediate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 15000;\n  let immediate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const fn = async () => {\n    if (currentlyFetching) {\n      // There is still a request, skip this interval\n      return;\n    }\n    if (!window.realQueueWorker && document.visibilityState === \"hidden\") {\n      // This tab is currently not working, skip status if tab is inactive\n      return;\n    }\n    currentlyFetching = true;\n    try {\n      const settings = {\n        additionalData: []\n      };\n      document.dispatchEvent(new CustomEvent(STATUS_ADDITIONAL_DATA_EVENT, {\n        detail: {\n          settings\n        }\n      }));\n      const detail = await request({\n        location: locationRestStatusGet,\n        params: {\n          additionalData: settings.additionalData.join(\",\")\n        }\n      });\n      document.dispatchEvent(new CustomEvent(STATUS_EVENT, {\n        detail\n      }));\n\n      // Check if the queue is currently empty, but there are still remaining items, try to get them\n      const {\n        remaining,\n        errors\n      } = detail;\n      if (\n      // Only the worker should refresh the queue as needed\n      window.realQueueWorker && getGlobalQueue().size === 0 && Object.values(remaining).length > 0 &&\n      // Do not load new items to the queue until the errors are resolved\n      Object.values(errors.list).length === 0) {\n        refreshQueue(false);\n      }\n    } finally {\n      currentlyFetching = false;\n    }\n  };\n  if (typeof intervalOrImmediate === \"number\") {\n    clearInterval(timeout);\n    timeout = setInterval(() => fn(), intervalOrImmediate);\n    immediate && (await fn());\n  } else if (intervalOrImmediate === true) {\n    await fn();\n  }\n}\nexport { fetchStatus };","import { createJobToPopulateNextJobs, fetchStatus } from \".\";\nimport { notifyWorkerTab } from \"./tabBridge\";\nlet currentlyFetching = false;\n\n/**\n * Refresh the queue and load new, unlocked jobs. You need to call this function in your\n * code if you know, there are new jobs added (e.g. \"Scan complete site\" button).\n */\nasync function refreshQueue() {\n  let doFetchStatus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  if (currentlyFetching) {\n    // There is still a request, skip this\n    return;\n  }\n\n  // Check, if the current worker is locked\n  if (window.realQueueWorker) {\n    currentlyFetching = true;\n    try {\n      await createJobToPopulateNextJobs(0)();\n      doFetchStatus && fetchStatus(true);\n    } finally {\n      currentlyFetching = false;\n    }\n  } else {\n    // Let the other tab know that it should refresh the queue\n    notifyWorkerTab({\n      event: \"refreshQueue\"\n    });\n  }\n}\nexport { refreshQueue };","import _ConfigProvider from \"antd/es/config-provider\";\nconst Provider = _ref => {\n  let {\n    children\n  } = _ref;\n  return /*#__PURE__*/React.createElement(_ConfigProvider, {\n    prefixCls: process.env.ANTD_PREFIX\n  }, children);\n};\nexport { Provider };","import { STATUS_EVENT } from \"../types\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { getStaticOptions } from \"../utils\";\n\n/**\n * Listen to the queue status and automatically create a state with the errors.\n */\nfunction useStatusErrors() {\n  const [, setPreviousHash] = useState();\n  const [errors, setErrors] = useState({});\n  const applyErrors = useCallback((hash, list) => setPreviousHash(previousHash => {\n    if (previousHash !== hash) {\n      setErrors(list);\n      return hash;\n    }\n    return previousHash;\n  }), []);\n  const listener = useCallback(async _ref => {\n    let {\n      detail: {\n        errors: {\n          hash,\n          list\n        }\n      }\n    } = _ref;\n    applyErrors(hash, list);\n  }, []);\n  useEffect(() => {\n    // Initial state\n    const {\n      hash,\n      list\n    } = getStaticOptions().errors;\n    applyErrors(hash, list);\n    document.addEventListener(STATUS_EVENT, listener);\n    return () => {\n      document.removeEventListener(STATUS_EVENT, listener);\n    };\n  }, []);\n  return {\n    errors\n  };\n}\nexport { useStatusErrors };","import { RouteHttpVerb } from \"@devowl-wp/utils\";\nexport const locationRestJobsDelete = {\n  path: \"/jobs\",\n  method: RouteHttpVerb.DELETE\n};","import { JOBS_DELETED_EVENT } from \"../../types\";\nimport { request } from \"../../utils\";\nimport { locationRestJobsDelete } from \"../../wp-api\";\nimport { fetchStatus } from \"..\";\n\n/**\n * Delete jobs by e.g. type. This is similar to a \"Cancel\" button.\n */\nasync function deleteJobs(params) {\n  const response = await request({\n    location: locationRestJobsDelete,\n    params\n  });\n  document.dispatchEvent(new CustomEvent(JOBS_DELETED_EVENT, {\n    detail: {\n      params,\n      response\n    }\n  }));\n  await fetchStatus(true);\n  return response;\n}\nexport { deleteJobs };","import { RouteHttpVerb } from \"@devowl-wp/utils\";\nexport const locationRestJobsRetryPost = {\n  path: \"/jobs/retry\",\n  method: RouteHttpVerb.POST\n};","import { JOBS_RETRIED_EVENT } from \"../../types\";\nimport { request as utilsRequest } from \"../../utils\";\nimport { locationRestJobsRetryPost } from \"../../wp-api\";\nimport { fetchStatus } from \"..\";\n\n/**\n * Retry jobs by e.g. type. This is similar to a \"Cancel\" button.\n */\nasync function retryJobs(request) {\n  const response = await utilsRequest({\n    location: locationRestJobsRetryPost,\n    request\n  });\n  document.dispatchEvent(new CustomEvent(JOBS_RETRIED_EVENT, {\n    detail: {\n      request,\n      response\n    }\n  }));\n  await fetchStatus(true);\n}\nexport { retryJobs };","import { RouteHttpVerb } from \"@devowl-wp/utils\";\nexport const locationRestJobsSkipPost = {\n  path: \"/jobs/skip\",\n  method: RouteHttpVerb.POST\n};","import { JOBS_RETRIED_EVENT } from \"../../types\";\nimport { request as utilsRequest } from \"../../utils\";\nimport { locationRestJobsSkipPost } from \"../../wp-api\";\nimport { fetchStatus } from \"..\";\n\n/**\n * Skip jobs by e.g. type.\n */\nasync function skipJobs(request) {\n  const response = await utilsRequest({\n    location: locationRestJobsSkipPost,\n    request\n  });\n  document.dispatchEvent(new CustomEvent(JOBS_RETRIED_EVENT, {\n    detail: {\n      request,\n      response\n    }\n  }));\n  await fetchStatus(true);\n}\nexport { skipJobs };","import _Spin from \"antd/es/spin\";\nimport _List from \"antd/es/list\";\nimport _Dropdown from \"antd/es/dropdown\";\nimport { useState, useCallback } from \"react\";\nimport { __ } from \"../../utils\";\nimport { deleteJobs, retryJobs, skipJobs } from \"../../queue\";\nconst ErrorModalListItem = _ref => {\n  let {\n    item: {\n      actions,\n      type,\n      label,\n      description,\n      failedJobs\n    }\n  } = _ref;\n  const [busy, setBusy] = useState(false);\n  const handleDelete = useCallback(async () => {\n    setBusy(true);\n    try {\n      await deleteJobs({\n        type\n      });\n    } finally {\n      setBusy(false);\n    }\n  }, [type]);\n  const handleRetry = useCallback(async () => {\n    setBusy(true);\n    try {\n      await retryJobs({\n        type\n      });\n    } finally {\n      setBusy(false);\n    }\n  }, [type]);\n  const handleSkip = useCallback(async () => {\n    setBusy(true);\n    try {\n      await skipJobs({\n        type\n      });\n    } finally {\n      setBusy(false);\n    }\n  }, [type]);\n  const useActionText = useCallback((action, defaultText) => actions.filter(_ref2 => {\n    let {\n      action: a\n    } = _ref2;\n    return action === a;\n  })[0]?.linkText || defaultText, [actions]);\n  return /*#__PURE__*/React.createElement(_Spin, {\n    spinning: busy\n  }, /*#__PURE__*/React.createElement(_List.Item, {\n    style: {\n      paddingLeft: 0,\n      paddingRight: 0\n    },\n    actions: [/*#__PURE__*/React.createElement(_Dropdown.Button, {\n      key: \"test\",\n      onClick: handleRetry,\n      menu: {\n        items: [{\n          key: \"skip\",\n          label: useActionText(\"skip\", __(\"Skip failed jobs\")),\n          onClick: handleSkip\n        }, ...actions.map(_ref3 => {\n          let {\n            action,\n            url,\n            linkText,\n            target = \"_blank\"\n          } = _ref3;\n          return !action && {\n            key: url,\n            onClick: () => window.open(url, target),\n            label: linkText\n          };\n        }), {\n          key: \"delete\",\n          danger: true,\n          label: useActionText(\"delete\", __(\"Cancel process\")),\n          onClick: handleDelete\n        }]\n      }\n    }, useActionText(\"retry\", __(\"Retry\")))]\n  }, /*#__PURE__*/React.createElement(_List.Item.Meta, {\n    title: label,\n    description: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", null, description), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        marginTop: 10\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", null, __(\"Error message:\"))), failedJobs.slice(0, 1).map(job => {\n      const {\n        id,\n        exception: {\n          errors\n        }\n      } = job;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        \"data-job\": id,\n        key: id,\n        onClick: () => console.log(job)\n      }, Object.keys(errors).map(code => /*#__PURE__*/React.createElement(\"div\", {\n        key: code,\n        \"data-code\": code,\n        dangerouslySetInnerHTML: {\n          __html: errors[code].join(\"<br />\")\n        }\n      })));\n    }))\n  })));\n};\nexport { ErrorModalListItem };","import _List from \"antd/es/list\";\nimport { ErrorModalListItem } from \".\";\nconst ErrorModalList = _ref => {\n  let {\n    list\n  } = _ref;\n  return /*#__PURE__*/React.createElement(_List, {\n    size: \"small\",\n    dataSource: Object.values(list),\n    renderItem: item => /*#__PURE__*/React.createElement(ErrorModalListItem, {\n      item: item,\n      key: item.type\n    })\n  });\n};\nexport { ErrorModalList };","import _Modal from \"antd/es/modal\";\nimport { useState, useEffect } from \"react\";\nimport { useStatusErrors } from \"../../hooks\";\nimport { __ } from \"../../utils\";\nimport { ErrorModalList } from \".\";\nconst ErrorModal = () => {\n  const {\n    errors\n  } = useStatusErrors();\n  const [visible, setVisible] = useState(false);\n  useEffect(() => {\n    const {\n      activeElement\n    } = document;\n    const hasErrors = Object.values(errors).length > 0;\n    if (hasErrors) {\n      if (activeElement && (/^(?:input|select|textarea|button)$/i.test(activeElement.nodeName) || activeElement.hasAttribute(\"contenteditable\"))) {\n        setVisible(false);\n        const listener = () => {\n          setVisible(true);\n        };\n        activeElement.addEventListener(\"blur\", listener, {\n          once: true\n        });\n        return () => {\n          activeElement.removeEventListener(\"blur\", listener);\n        };\n      } else {\n        setVisible(true);\n      }\n    } else {\n      setVisible(false);\n    }\n    return () => {\n      // Silence is golden.\n    };\n  }, [errors]);\n  return /*#__PURE__*/React.createElement(_Modal, {\n    className: \"real-queue-error-modal\",\n    footer: null,\n    title: __(\"Background tasks: Something went wrong\"),\n    open: visible,\n    width: 750,\n    closable: false\n  }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"description\"\n  }, __(\"Your WordPress installation is working in the background on tasks that you basically don't notice. Unfortunately, an error occurred while running a task. Below is a list of failed tasks that you can either delete (and thus cancel the task) or try again.\")), /*#__PURE__*/React.createElement(ErrorModalList, {\n    list: errors\n  })));\n};\nexport { ErrorModal };","import { useCallback, useEffect, useState } from \"react\";\nimport { deleteJobs, fetchStatus } from \"../queue\";\nimport { JOBS_DELETED_EVENT, STATUS_ADDITIONAL_DATA_EVENT, STATUS_EVENT } from \"../types\";\nimport { useStatusErrors } from \"./useStatusErrors\";\nfunction useProgress(_ref) {\n  let {\n    type,\n    fetchStatusInterval,\n    fetchAdditionalData = false,\n    onAdditionalData,\n    onCancel\n  } = _ref;\n  const [cancelling, setCancelling] = useState(false);\n  const [jobsStarted, setJobsStarted] = useState(false);\n  const [remaining, setRemaining] = useState();\n  const [percent, setPercent] = useState();\n  const [total, setTotal] = useState();\n  const [failure, setFailure] = useState();\n  const [paused, setPaused] = useState();\n  const [currentJob, setCurrentJob] = useState();\n  const {\n    errors: {\n      [type]: errors\n    }\n  } = useStatusErrors();\n\n  // Determine status\n  let status = \"not-started\";\n  if (jobsStarted) {\n    if (errors) {\n      status = \"failed\";\n    } else if (remaining === 0 && !failure) {\n      status = \"done\";\n    }\n  }\n\n  // Listen to status updates\n  const listener = useCallback(async _ref2 => {\n    let {\n      detail: {\n        currentJobs,\n        remaining: {\n          [type]: remainingArr\n        },\n        additionalData\n      }\n    } = _ref2;\n    if (remainingArr) {\n      const {\n        remaining,\n        total,\n        failure,\n        paused\n      } = remainingArr;\n      const percent = +((total - remaining) / total * 100).toFixed(0);\n      setCurrentJob(currentJobs[type]);\n      setRemaining(remaining);\n      setTotal(total);\n      setFailure(failure);\n      setPaused(paused);\n      setPercent(percent > 0 ? percent : 1);\n    } else {\n      setCurrentJob(undefined);\n      setRemaining(0);\n      setTotal(0);\n      setFailure(0);\n      setPaused(0);\n      setPercent(100);\n    }\n\n    // Always handle the received response, too\n    if (fetchAdditionalData !== false && additionalData[fetchAdditionalData]) {\n      onAdditionalData(additionalData);\n    }\n  }, [type, onAdditionalData, fetchAdditionalData]);\n\n  // Listen to all status updated\n  useEffect(() => {\n    document.addEventListener(STATUS_EVENT, listener);\n    return () => {\n      document.removeEventListener(STATUS_EVENT, listener);\n    };\n  }, [listener]);\n  useEffect(() => {\n    if (remaining > 0) {\n      setJobsStarted(true);\n    }\n  }, [remaining]);\n\n  // Let the status updater know that we want to fetch additional data\n  useEffect(() => {\n    if (fetchAdditionalData) {\n      const listener = async _ref3 => {\n        let {\n          detail: {\n            settings: {\n              additionalData\n            }\n          }\n        } = _ref3;\n        additionalData.push(fetchAdditionalData);\n      };\n      document.addEventListener(STATUS_ADDITIONAL_DATA_EVENT, listener);\n      return () => {\n        document.removeEventListener(STATUS_ADDITIONAL_DATA_EVENT, listener);\n      };\n    }\n    return () => {\n      // Silence is golden.\n    };\n  }, [fetchAdditionalData]);\n  const applyCancelState = useCallback(() => {\n    setJobsStarted(false);\n    setCurrentJob(undefined);\n    setRemaining(0);\n    setTotal(0);\n    setFailure(0);\n    setPaused(0);\n    setPercent(100);\n    onCancel?.();\n  }, [onCancel]);\n\n  // Listen to manual deletion of tasks in the error modal\n  useEffect(() => {\n    const listenerDeleted = async _ref4 => {\n      let {\n        detail: {\n          params: {\n            type: deletedType\n          }\n        }\n      } = _ref4;\n      if (deletedType === type) {\n        applyCancelState();\n      }\n    };\n    document.addEventListener(JOBS_DELETED_EVENT, listenerDeleted);\n    return () => {\n      document.removeEventListener(JOBS_DELETED_EVENT, listenerDeleted);\n    };\n  }, [listener, applyCancelState]);\n  const handleCancel = useCallback(async () => {\n    applyCancelState();\n    setCancelling(true);\n    await deleteJobs({\n      type\n    });\n    setCancelling(false);\n  }, [type, applyCancelState]);\n\n  // Modify the status updater\n  useEffect(() => {\n    if (fetchStatusInterval > 0) {\n      fetchStatus(fetchStatusInterval, true);\n      return () => {\n        fetchStatus();\n      };\n    }\n    return () => {\n      // Silence is golden.\n    };\n  }, [fetchStatusInterval]);\n  return {\n    errors,\n    status,\n    jobsStarted,\n    remaining,\n    percent,\n    total,\n    failure,\n    paused,\n    currentJob,\n    handleCancel,\n    cancelling\n  };\n}\nexport { useProgress };","/* istanbul ignore file: we do not need to care about the entry point file as errors are detected through integration tests (E2E) */\n\n/**\n * The entry point for the admin side wp-admin resource.\n */\nimport { fetchStatus, refreshQueue, restoreJobsFromLocalStorage, lockTab, createActivityDetector, clearWorkerNotifications, checkWorkerNotifications } from \"./queue\";\nimport { CLIENT_JOB_EVENT_PREFIX } from \"./types\";\nimport { ready, waitObject } from \"./utils\";\nimport \"./style/antd.less\";\nimport \"./style/index.scss\";\nimport { ErrorModal, Provider } from \"./components\";\nimport { render } from \"react-dom\";\nready(async () => {\n  // Only allow queue runtime for one tab\n  await waitObject(() => lockTab() ? undefined : \"unlocked\", 3000);\n  window.addEventListener(\"beforeunload\", () => lockTab(false));\n  lockTab(true);\n\n  // Create error modal\n  const errorModalElement = document.createElement(\"div\");\n  document.body.appendChild(errorModalElement);\n  render( /*#__PURE__*/React.createElement(Provider, null, /*#__PURE__*/React.createElement(ErrorModal, null)), errorModalElement);\n\n  // Mark this tab as worker\n  clearWorkerNotifications();\n  window.realQueueWorker = true;\n  setInterval(() => checkWorkerNotifications({\n    refreshQueue\n  }), 3000);\n  const addedFromLocalStorage = await restoreJobsFromLocalStorage();\n  if (!addedFromLocalStorage) {\n    // No new items from LocalStorage, check if queue has new items\n    refreshQueue();\n  }\n}, \"interactive\");\nready(() => {\n  createActivityDetector();\n  fetchStatus(15000, true);\n\n  // When the tab gets visible, immediate fetch status\n  document.addEventListener(\"visibilitychange\", () => {\n    if (document.visibilityState === \"visible\") {\n      fetchStatus(true);\n    }\n  });\n});\n\n// Example implementation of a client job\ndocument.addEventListener(`${CLIENT_JOB_EVENT_PREFIX}example`, async _ref => {\n  let {\n    detail: {\n      job,\n      resolve,\n      fetchJob,\n      saveJobResult\n    }\n  } = _ref;\n  console.log(\"Lock this job and sleep...\", job);\n  const {\n    id,\n    process_total\n  } = job;\n  await fetchJob(id, true);\n  await new Promise(resolve => setTimeout(resolve, 5000));\n  saveJobResult(id, process_total);\n  resolve();\n});\nexport * from \"./hooks\";\nexport * from \"./types\";\nexport * from \"./utils\";\nexport * from \"./queue\";\nexport * from \"./wp-api\";","module.exports = React;","module.exports = ReactDOM;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t826: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkdevowlWp_realQueue\"] = self[\"webpackChunkdevowlWp_realQueue\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [764], () => (__webpack_require__(7828)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","memoizeSupported","localStorageTest","test","localStorage","setItem","removeItem","e","devowlWp_utils","FACTORY_MEMO","get","createRequestFactory","window","BaseOptions","urlBuilder","arguments","request","createLocalizationFactory","_n","_nx","_x","__","_i","ready","fn","state","length","undefined","Promise","resolve","document","readyState","addEventListener","async","waitObject","getObject","delayNextCheck","maxTries","i","r","setTimeout","getStaticOptions","others","LOCAL_STORAGE_KEY_LOCK_TAB","keepUpToDateInterval","lockTab","lsKey","localStorageSuffix","clearInterval","fnWrite","Date","getTime","toString","setInterval","currentValue","getItem","isNaN","LOCAL_STORAGE_KEY_QUEUE_NOTIFY_WORKER_PREFIX","notifyWorkerTab","data","JSON","stringify","clearWorkerNotifications","lsPrefix","lsEntryName","Object","keys","startsWith","checkWorkerNotifications","callbacks","event","parse","REMAINING_EVENT","locationRestJobsGet","path","method","RouteHttpVerb","JOB_DONE_EVENT_PREFIX","JOBS_DELETED_EVENT","JOBS_RETRIED_EVENT","CLIENT_JOB_EVENT_PREFIX","locationRestJobGet","fetchJob","id","lock","location","params","JOBS_SKIPPED_EVENT","locationRestJobResultPost","saveJobResult","process","exception","code","errorCode","message","errorMessage","errorData","result","pauseToAvoidRecurringException","job","type","listenerDeleted","detail","deletedType","_ref","removeEventListener","listenerRetried","retriedType","_ref2","skippedType","_ref3","WINDOW_ACTIVITY_DETECTOR_IS_ACTIVE_KEY","createActivityDetector","activityDetector","autoInit","on","init","JOB_DELAY_EVENT_PREFIX","jobDelay","isIdle","delay_ms","settings","dispatchEvent","CustomEvent","LOCAL_STORAGE_KEY_RESTORE_JOBS","restoreJobsFromLocalStorage","queueClass","getGlobalQueue","enqueueHandler","ids","jobs","remaining","unfinished","filter","process_total","runs","retries","locked","enqueueFromList","map","join","executeClientJob","run","reject","restorable","split","Number","idx","indexOf","splice","convertClientJobToPromise","queue","success","updateRemaining","pause","locationRestJobExecute","executeServerJob","tryIds","try","done","failed","failedJob","failedId","doneJob","doneId","errors","SUCCESSFUL_SERVER_JOBS","convertServerJobToPromise","dispatchDoneEvent","push","RealQueueClass","constructor","this","alreadyAddedJobIds","_handler","listenRetries","listenDeletions","list","tryJobIds","worker","handler","listenerFailedEvent","listenerFailed","doneJobId","alreadyIdx","previousAt","previousJob","createJobToPopulateNextJobs","forEach","_ref4","_ref5","addAll","enqueue","options","Error","element","dequeue","shift","size","filterQueueItem","_ref6","setHandler","removeByType","forgetAboutAlreadyAdded","removedIds","item","_ref7","_ref8","realQueueInstance","autoStart","concurrency","_queue","afterJobId","after","STATUS_ADDITIONAL_DATA_EVENT","STATUS_EVENT","locationRestStatusGet","timeout","currentlyFetching","fetchStatus","intervalOrImmediate","immediate","realQueueWorker","visibilityState","additionalData","values","refreshQueue","doFetchStatus","Provider","children","React","createElement","prefixCls","useStatusErrors","setPreviousHash","useState","setErrors","applyErrors","useCallback","hash","previousHash","listener","useEffect","locationRestJobsDelete","deleteJobs","response","locationRestJobsRetryPost","retryJobs","locationRestJobsSkipPost","skipJobs","ErrorModalListItem","actions","label","description","failedJobs","busy","setBusy","handleDelete","handleRetry","handleSkip","useActionText","action","defaultText","a","linkText","spinning","style","paddingLeft","paddingRight","key","onClick","menu","items","url","target","open","danger","title","Fragment","marginTop","slice","console","log","dangerouslySetInnerHTML","__html","ErrorModalList","dataSource","renderItem","ErrorModal","visible","setVisible","activeElement","nodeName","hasAttribute","once","className","footer","width","closable","useProgress","fetchStatusInterval","fetchAdditionalData","onAdditionalData","onCancel","cancelling","setCancelling","jobsStarted","setJobsStarted","setRemaining","percent","setPercent","total","setTotal","failure","setFailure","paused","setPaused","currentJob","setCurrentJob","status","currentJobs","remainingArr","toFixed","applyCancelState","handleCancel","errorModalElement","body","appendChild","render","module","exports","ReactDOM","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","m","O","chunkIds","priority","notFulfilled","Infinity","fulfilled","j","every","n","getter","__esModule","d","definition","o","defineProperty","enumerable","g","globalThis","Function","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}